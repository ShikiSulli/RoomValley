{% extends 'base.html.twig' %}

{% block title %}Roomvalley Calendar TEST
{% endblock %}

{% block javascripts %}
	{{ parent() }}
	<script src="https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@6.1.9/index.global.min.js"></script>
{% endblock %}

{% block body %}

{# placements des réservations dans un tableau pour exploiter dans le calendrier #}
{% set resEvents = [] %}
{% for item in reslist %}
{{ dump(item) }}
{% set itemEnd = item.date_end|date('Y-m-d 23:59:59') %}
	{% set resEvents = resEvents|merge({(item.id): {'title': 'Réservation', 'start': item.date_start|date('Y-m-d H:i:s'), 'end': itemEnd, 'confirmation':item.isConfirmed }}) %}
{% endfor %}

{% if resa is defined %}
	
{{ dump(resa) }}
{% endif %}
{% for message_resa in app.flashes('successResa') %}
        <div class="alert alert-success col-8 m-auto mb-5 text-center" role="alert"><h5>{{ message_resa }}</h5> <a class="btn btn-success justify-content-center" href="{{ path('app_page') }}" class="btn btn-success">Voir mes réservations</a></div>
		
		
    {% endfor %}
	{# container pour présentation de la salle #}
	
	<article class="container">
		<section
			class="row">
			{# contenu du carousel #}
			<section class="col-lg-6 order-1">

				<div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
					<ol class="carousel-indicators">
						{% for image in room.imagesRooms %}

							<li data-target="#carouselExampleIndicators" data-slide-to="{{ image.id }}"></li>
						{% endfor %}
					</ol>
					<div class="carousel-inner">
						{% for image in room.imagesRooms %}
							<div class="carousel-item active">
								<img src={{ image.path }} class="d-block w-100">
							</div>
						{% endfor %}
					</div>
					{% if room.imagesRooms|length > 0 %}
						<a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
							<span class="carousel-control-prev-icon" aria-hidden="true"></span>
							<span class="sr-only"></span>
						</a>
						<a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
							<span class="carousel-control-next-icon" aria-hidden="true"></span>
							<span class="sr-only"></span>
						</a>
					{% endif %}

				</div>


			</section>
			{# contenu présentation de la salle #}
			<section class="col-lg-6 order-2">
				<h1 class="mt-5">{{ room.name }}</h1>
				<h3>{{ room.address }}</h3>
				<div class="d-flex">
					<h4 class="p-2">Capacité :
						<i class="bi bi-people-fill p-2"></i>
						{{ room.capacityMin }}
						-
						{{ room.capacity }}</h4><br><br>
				</div>
				<div class="budget">
					<p class="mb-5 body-color">A partir de
						<span class="fz17 fw500 dark-color ms-1">
							<strong>{{ room.price }}</strong>
							/jour</span>
					</p>
				</div>
				<p>{{ room.description }}</p>
			</section>
			{# fin du contenu de présentation la salle #}

		</div>
	</article>
	{# fin de la présentation de la salle #}


	<article class="container">
		<section
			class="row">

			{# partie équipement et ergonomie de la salle #}
			<div class="col-lg-6 order-1">
				<h2 class="mt-5">Equipements et Ergonomie</h2>

				<div class="d-flex">
                    <div>
					    <h3>Pour votre confort</h3>
					{% for ergo in room.ergonomy %}

						{#  présentaion des ergonomies #}
						<div class="list-meta d-flex justify-content-between align-items-center mt15">
							<div>
								<span class="position-relative mr10">
									<img class="rounded-circle w-25" src={{ ergo.icon }} alt="{{ ergo.name }}">
								</span>
								<span class="fz14">{{ ergo.name }}</span>
							</div>

						</div>
                    </div>
						{# fin test présentaion des érgonomies #}
					{% endfor %}
					{#  présentation des équipements #}
					<div>
						<h3>Les équipements à votre disposition</h3>

						{% for item in room.equipmentRoomQuantities %}

							<div class="list-meta d-flex justify-content-between align-items-center mt15">
								<div>
									<span class="position-relative mr10">
										<img class="rounded-circle w-25" src={{ item.equipment.icon }} alt="{{ item.equipment.name }}">
									</span>
									<span class="fz14">
										{{ item.quantity }}
										{{ item.equipment.type }}
									</span>
								</div>
							</div>
						{# gestion des logiciels #}
						{% if item.equipment.type == 'ordinateur' %}
							<a class="btn btn-info" data-bs-toggle="collapse" href="#collapseSoftware" aria-expanded="false" aria-controls="collapseSoftware">
								voir les logiciels disponibles
							</a>


							<div class="collapse" id="collapseSoftware">
								<div class="card card-body">


									{% for software in item.equipment.software %}


										<span class="position-relative mr10">
											{{ software.name }}
											-
											{{ software.version }}
										</span>

									{% endfor %}
								</div>
							</div>
							{# fin gestion des logiciels #}

							<br><br>
						{% endif %}

					{% endfor %}
					</div>
					{# fin  présentation des équipements #}


				</div>
			</div>
			{# fin partie équipement et ergonomie de la salle #}

			{# partie calendrier #}
			{# récupération des résas pour les exploiter dans le calendrier #}
			<div id="resas" data-list="{{ resEvents|json_encode }}" ></div>
			<div
				class="col-lg-6 order-2">
				{# début du calendrier #}
				<div class="container-fluid  mb-2 pt-5">
					<div class="card-body b-l calender-sidebar ">
						<div
							id="calendar1"><!-- Votre calendrier ici -->
						</div>
						<div>
							<form action="{{ path('app_reservation_create',{slug: room.slug},'reservation') }}" method='post' class="text-center">
								<label for="date_start">Reservation pour le :
								</label>
								<input type="date" name="date_start" id="date_start">
								<br>
								<label for="date_end">Fin de Reservation pour le :
								</label>
								<input type="date" name="date_end" id="date_end">
								<br>
								<label for="nombre_jours">Nombre de Jour(s) Reserver :</label>
								<input type="hidden" name="nombre_jours"  id="duration" >
								<span name="nombre_jours" id="nombre_jours"></span>
								  {% for flash_error in app.flashes('errorResa') %}
        <div class="alert alert-danger col-4 m-auto mb-5" role="alert">{{ flash_error }}</div>
    {% endfor %}
								<br>
								<input type="submit" name="submit" value="Pré-réserver" id="addToReservationButton" class="btn btn-success" >
							</form>
						</div>
					</div>
				</div>

				{# fin du calendrier #}
			</div>
			{# fin partie calendrier #}
		</section>
	</article>


	{{ dump(room) }}


	<script>
		document.addEventListener('DOMContentLoaded', function () {
let isStartDateSelected = false;
let startDate = '';
const calendarEl = document.getElementById('calendar1');
const dateStartInput = document.getElementById('date_start');
const dateEndInput = document.getElementById('date_end');
const numberOfDaysElement = document.getElementById('nombre_jours');
const duration = document.getElementById('duration');
const resas= JSON.parse(document.getElementById("resas").getAttribute("data-list"));

console.log(resas);
////////////
// Gestion des réservations placées en événements

// Transformation des réservations en un format compatible avec FullCalendar
  let events = resas.map(function (resa) {
	

	//condition pour la couleur de fond des réservations en fonction de la confirmation ou non
    
	if(resa.confirmation == true){
// si la réservation est confirmée
return {
      title: 'Réservation', // Titre de l'événement
      start: resa.start, // Date de début de la réservation
      end: resa.end,
	  eventDisplay:'auto', // Date de fin de la réservation
	  backgroundColor:'red', // Couleur de fond de l'événement (peut être personnalisée)
	};
	}else{
		// si la réservation n'est pas confirmée
return {
      title: 'Réservation', // Titre de l'événement
      start: resa.start, // Date de début de la réservation
      end: resa.end,
	  eventDisplay:'auto', // Date de fin de la réservation
	  backgroundColor:'orange', // Couleur de fond de l'événement (peut être personnalisée)
	};
	}
	
	
  });


function updateNumberOfDays() {
const dateStart = new Date(startDate);
const dateEnd = new Date(dateEndInput.value);

let numberOfDays = 0;
let currentDate = dateStart;

while (currentDate <= dateEnd) { // Vérifier si le jour de la semaine n'est pas un samedi (6) ou un dimanche (0)
if (currentDate.getDay() !== 6 && currentDate.getDay() !== 0) {
numberOfDays++;
}

currentDate.setDate(currentDate.getDate() + 1);
}

// Afficher le nombre de jours entre les deux dates dans l'élément #nombre_jours
duration.value = numberOfDays;
console.log(duration)
numberOfDaysElement.textContent = numberOfDays;
}

const calendar = new FullCalendar.Calendar(calendarEl, {
themeSystem: 'bootstrap5',
initialView: 'dayGridMonth',
timeZone: 'Europe/Paris',
locale: 'fr',
selectable: true,
businessHours: [ // specify an array instead
  {
    daysOfWeek: [ 1, 2, 3,4,5 ], //
  },
],
events:events,
//selectOverlap empêche la sélection de jours déjà réservés pour les éléments placés en background
selectOverlap: function(event) {
    return event.rendering === 'background';
  },
headerToolbar: {
left: 'prev,next',
center: 'title',
right: 'prevYear,nextYear',
},
select: function (info) {
if (! isStartDateSelected) {
startDate = info.startStr;
dateStartInput.value = startDate;
isStartDateSelected = true;
} else {
const endDate = info.startStr;
dateEndInput.value = endDate;
isStartDateSelected = false;
updateNumberOfDays(); // Met à jour le nombre de jours quand date_end est sélectionné
}
}
});

// Écoutez l'événement 'input' pour les champs de date
dateStartInput.addEventListener('input', function () {
startDate = dateStartInput.value;
updateNumberOfDays(); // Met à jour le nombre de jours dès que date_start est modifié
});

dateEndInput.addEventListener('input', function () {
updateNumberOfDays(); // Met à jour le nombre de jours dès que date_end est modifié
});

calendar.render();
});
	</script>
{% endblock %}
